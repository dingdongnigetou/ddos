                      (C) 2014 Jindong Huang

-Fri Mar 21, 2014
 I light the first led in asm, next time I should 
 set the environment for C, just like the bootloader. 

-Fue Mar 25, 2014
 There are also couple problems occurred with UART
 shit me. I think it may be the PCLK. 

-Wed Mar 26, 2014
 Haha, my guess it right, I add the clock.S to initialize
 the system clock and enable FIFO in UART so that s3c6410  
 can connect with PC normally now. And, I found that there
 are some difference between *.s and *.S. *.S file can  
 precompile while *.s can not! So I change the *.s into *S.
 next time try to enable the lcd at s3c6410.
 
-Thu Mar 27, 2014
 For make more simple, I change the clock.S into clock.c.
 And, new a Makefile into driver/ in order to expand easily
 in the future. OK, the lcd driver should be began in the  
 next time. :-)

-Fri Mar 28, 2014
 I made a git mistake yesterday. I use "git reset --hard HEAD^" 
 to undo the last commit that wrong. So, my source back to the
 older one... so that I should rewrite parts of them... Now I
 see I should use "git reset --soft HEAD^" witch just undo the
 commit though the source.  
 I find that lcd driver is more difficult than uart driver. So 
 it maybe takes me more time. But, I just like the work that
 is not easily. :)

-Mon Mar 31, 2014
 The background light driver is so difficult that I have to   
 read other people's code for it. But, it's so funny! 

-Tue Apr 1, 2014
 Happy April Fool's Day. :)
 Today I finish the background light driver! And it works well.
 
-Thu Apr 3, 2014
 So difficult... Fight!!! 

-Sat Apr 5, 2014
 I find that I should learn the hardware coding of ARM seriously~
 Let's watch the teaching video. :)

-Tue Apr 8, 2014
 Now, it read code(just 8K) from nand flash into memory, and then copy 
 itself into DDR.
 I initialize the DDR, so I have 512M memory that under my control.

-Wed Apr 9, 2014
 OK, the lcd is working well now! Next time write character into lcd.

-Thu Apr 10, 2014
 Shit, I found the error that can not write character on lcd finally.
 The size of bin is more than 8K... So, we should initialize the nand 
 flash so that we can read data form it and copy them into DDR. Because 
 the hardware always read the first 8K data in nand flash.

-Mon Apr 14, 2014
 The nand flash driver doesn't work! I can't find the fault today.
 Everything will be OK. :)
iiiiikjadfkjai 
-Sat Apr 19, 2014
 Nand flash read function can't work!!! But the erase function works well.
 
-Mon Apr 21, 2014
 OK, the nand flash driver works well now! I set TWRPH0 as 2 so the problem
 is done. By the way, I find that the Jlink just load the bin file into 
 memory but not nandflash so that I should use SD to load the bin file.

-Wed Apr 23, 2014
 The lcd draw still doesn't work, next time I think I should learn the irq
 first.

-Sat Apr 26, 2014
 Add the printf() and scanf(), but they doesn't work well.

-Sun Apr 27, 2014
 I drop the vsprintf.c today because I don't want to use other's code. I 
 make up my mind that write it by ourself. Yes, I ask my friend for help
 so that we can work on this OS together. It's better than I fight alone. 
 Today I finish the gets() and puts(). And, I decide to write the document  
 for the OS, such as driver and so on if I finish their coding. So, welcome  
 the new guy, Zhensheng Zhou. :)

-Mon Apr 28, 2014
 Good Job! The lcd can display the ch now. I download the pdf of AT070TN92
 to find that my lcd is 800 * 480, so the problem is fixed. Before that, I
 try the 1024 * 768 and so on. But either them is right. But it still have
 some problems. Go ahead :)

-Mon May 5, 2014
 The lcd is not finish yet but it's enough powerful now. Next few days I
 should finish the exception handling. 

-Tue May 6, 2014
 Shit... I put mistake sp as pc so the cpu always show UND mode...
 Now, the OS can handle each exception include interrupt. Next time finish 
 the interrupt.

-Wed May 7, 2014
 I decide to do nothing about irq because it maybe not useful. The most 
 useful exception instruction is swi (software interrupt) which can trap
 into kernel so that can execute the system call. But there is no system
 call now, we will got them in the future. Next time to begin to code the
 MMU.

-Mon May 19, 2014
 Memory management is very difficult for me... But, it also interesting.
 Just keep peace and work it out! Don't push yourself.
 This gonna be successful. :)
 
-Fri May 23, 2014
 It's works well until I add the lcd_init. Some wrong with it. Next time
 to finish the memory map and change the LCD mode.(it maybe be works)

-Tue May 27, 2014
 I so stupid that spent a long time in understanding the second page.
 But it works! I know the first and second page finally. Next time continue 
 this. :)

-Wed May 28, 2014
 I add the coarse and small page, but it doesn't work!

-Sun Jun 1, 2014
 The L1 and L2 page table work well now. :)

-Wed Jun 4, 2014
 I set each domain keep it's permission, like kernel is privilege and shared 
 buffer is all modes can access. And, I add ENABLE_IRQ and DISABLE_IRQ, it 
 may be useful in the future. New time to code the system call and task 
 management.

-Fri Jun 6, 2014
 Today I play with the system call coding, let the ledop() as system call and
 add necessary define. Next time to test this system call then turn to coding
 the process management. :) 

-Mon Jun 9, 2014
 The system call works well. Let's begin to code task management.

